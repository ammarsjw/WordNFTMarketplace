// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuctionMade extends ethereum.Event {
  get params(): AuctionMade__Params {
    return new AuctionMade__Params(this);
  }
}

export class AuctionMade__Params {
  _event: AuctionMade;

  constructor(event: AuctionMade) {
    this._event = event;
  }

  get _minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _mintTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _initialExpiryTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BidCancelled extends ethereum.Event {
  get params(): BidCancelled__Params {
    return new BidCancelled__Params(this);
  }
}

export class BidCancelled__Params {
  _event: BidCancelled;

  constructor(event: BidCancelled) {
    this._event = event;
  }

  get _bidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BidMade extends ethereum.Event {
  get params(): BidMade__Params {
    return new BidMade__Params(this);
  }
}

export class BidMade__Params {
  _event: BidMade;

  constructor(event: BidMade) {
    this._event = event;
  }

  get _bidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ChangedFeePercentages extends ethereum.Event {
  get params(): ChangedFeePercentages__Params {
    return new ChangedFeePercentages__Params(this);
  }
}

export class ChangedFeePercentages__Params {
  _event: ChangedFeePercentages;

  constructor(event: ChangedFeePercentages) {
    this._event = event;
  }

  get _marketplacePercentage(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get _minterPercentage(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class ChangedMarketplaceFeeWallet extends ethereum.Event {
  get params(): ChangedMarketplaceFeeWallet__Params {
    return new ChangedMarketplaceFeeWallet__Params(this);
  }
}

export class ChangedMarketplaceFeeWallet__Params {
  _event: ChangedMarketplaceFeeWallet;

  constructor(event: ChangedMarketplaceFeeWallet) {
    this._event = event;
  }

  get _marketplaceFeeWallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ChangedWordsNFTAddress extends ethereum.Event {
  get params(): ChangedWordsNFTAddress__Params {
    return new ChangedWordsNFTAddress__Params(this);
  }
}

export class ChangedWordsNFTAddress__Params {
  _event: ChangedWordsNFTAddress;

  constructor(event: ChangedWordsNFTAddress) {
    this._event = event;
  }

  get _wordsNFTAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get _bidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _minter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ClaimedAndNoBidsMade extends ethereum.Event {
  get params(): ClaimedAndNoBidsMade__Params {
    return new ClaimedAndNoBidsMade__Params(this);
  }
}

export class ClaimedAndNoBidsMade__Params {
  _event: ClaimedAndNoBidsMade;

  constructor(event: ClaimedAndNoBidsMade) {
    this._event = event;
  }

  get _minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ERC721Received extends ethereum.Event {
  get params(): ERC721Received__Params {
    return new ERC721Received__Params(this);
  }
}

export class ERC721Received__Params {
  _event: ERC721Received;

  constructor(event: ERC721Received) {
    this._event = event;
  }

  get _operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class Expired extends ethereum.Event {
  get params(): Expired__Params {
    return new Expired__Params(this);
  }
}

export class Expired__Params {
  _event: Expired;

  constructor(event: Expired) {
    this._event = event;
  }

  get _bidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _minter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ExpiredAndNoBidsMade extends ethereum.Event {
  get params(): ExpiredAndNoBidsMade__Params {
    return new ExpiredAndNoBidsMade__Params(this);
  }
}

export class ExpiredAndNoBidsMade__Params {
  _event: ExpiredAndNoBidsMade;

  constructor(event: ExpiredAndNoBidsMade) {
    this._event = event;
  }

  get _minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class WordsNFTMarketplace__tokenIdForAllBidsResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class WordsNFTMarketplace__tokenIdForCurrentBidResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class WordsNFTMarketplace__tokenIdForWordInfoResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }
}

export class WordsNFTMarketplace extends ethereum.SmartContract {
  static bind(address: Address): WordsNFTMarketplace {
    return new WordsNFTMarketplace("WordsNFTMarketplace", address);
  }

  WETH(): Address {
    let result = super.call("WETH", "WETH():(address)", []);

    return result[0].toAddress();
  }

  try_WETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH", "WETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bidExpiryTime(): BigInt {
    let result = super.call("bidExpiryTime", "bidExpiryTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bidExpiryTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bidExpiryTime",
      "bidExpiryTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bumpBidExpiryTime(): BigInt {
    let result = super.call(
      "bumpBidExpiryTime",
      "bumpBidExpiryTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_bumpBidExpiryTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bumpBidExpiryTime",
      "bumpBidExpiryTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarketplaceFeeWallet(): Address {
    let result = super.call(
      "getMarketplaceFeeWallet",
      "getMarketplaceFeeWallet():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getMarketplaceFeeWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getMarketplaceFeeWallet",
      "getMarketplaceFeeWallet():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getWordsNFTContractAddress(): Address {
    let result = super.call(
      "getWordsNFTContractAddress",
      "getWordsNFTContractAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getWordsNFTContractAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getWordsNFTContractAddress",
      "getWordsNFTContractAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lengthForAllBids(param0: BigInt): BigInt {
    let result = super.call(
      "lengthForAllBids",
      "lengthForAllBids(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_lengthForAllBids(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lengthForAllBids",
      "lengthForAllBids(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marketplaceFeeWallet(): Address {
    let result = super.call(
      "marketplaceFeeWallet",
      "marketplaceFeeWallet():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_marketplaceFeeWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "marketplaceFeeWallet",
      "marketplaceFeeWallet():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  marketplacePercentage(): i32 {
    let result = super.call(
      "marketplacePercentage",
      "marketplacePercentage():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_marketplacePercentage(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "marketplacePercentage",
      "marketplacePercentage():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  minimumBidIncreasePercentage(): i32 {
    let result = super.call(
      "minimumBidIncreasePercentage",
      "minimumBidIncreasePercentage():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_minimumBidIncreasePercentage(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "minimumBidIncreasePercentage",
      "minimumBidIncreasePercentage():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  minterPercentage(): i32 {
    let result = super.call(
      "minterPercentage",
      "minterPercentage():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_minterPercentage(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "minterPercentage",
      "minterPercentage():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  onERC721Received(
    _operator: Address,
    _from: Address,
    _tokenId: BigInt,
    _data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    _operator: Address,
    _from: Address,
    _tokenId: BigInt,
    _data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  startingBid(): BigInt {
    let result = super.call("startingBid", "startingBid():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startingBid(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startingBid", "startingBid():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenIdForAllBids(
    param0: BigInt,
    param1: BigInt
  ): WordsNFTMarketplace__tokenIdForAllBidsResult {
    let result = super.call(
      "tokenIdForAllBids",
      "tokenIdForAllBids(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new WordsNFTMarketplace__tokenIdForAllBidsResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_tokenIdForAllBids(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<WordsNFTMarketplace__tokenIdForAllBidsResult> {
    let result = super.tryCall(
      "tokenIdForAllBids",
      "tokenIdForAllBids(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new WordsNFTMarketplace__tokenIdForAllBidsResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  tokenIdForCurrentBid(
    param0: BigInt
  ): WordsNFTMarketplace__tokenIdForCurrentBidResult {
    let result = super.call(
      "tokenIdForCurrentBid",
      "tokenIdForCurrentBid(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new WordsNFTMarketplace__tokenIdForCurrentBidResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_tokenIdForCurrentBid(
    param0: BigInt
  ): ethereum.CallResult<WordsNFTMarketplace__tokenIdForCurrentBidResult> {
    let result = super.tryCall(
      "tokenIdForCurrentBid",
      "tokenIdForCurrentBid(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new WordsNFTMarketplace__tokenIdForCurrentBidResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  tokenIdForWordInfo(
    param0: BigInt
  ): WordsNFTMarketplace__tokenIdForWordInfoResult {
    let result = super.call(
      "tokenIdForWordInfo",
      "tokenIdForWordInfo(uint256):(address,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new WordsNFTMarketplace__tokenIdForWordInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_tokenIdForWordInfo(
    param0: BigInt
  ): ethereum.CallResult<WordsNFTMarketplace__tokenIdForWordInfoResult> {
    let result = super.tryCall(
      "tokenIdForWordInfo",
      "tokenIdForWordInfo(uint256):(address,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new WordsNFTMarketplace__tokenIdForWordInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  wordsNFT(): Address {
    let result = super.call("wordsNFT", "wordsNFT():(address)", []);

    return result[0].toAddress();
  }

  try_wordsNFT(): ethereum.CallResult<Address> {
    let result = super.tryCall("wordsNFT", "wordsNFT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get _newBid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class CancelBidCall extends ethereum.Call {
  get inputs(): CancelBidCall__Inputs {
    return new CancelBidCall__Inputs(this);
  }

  get outputs(): CancelBidCall__Outputs {
    return new CancelBidCall__Outputs(this);
  }
}

export class CancelBidCall__Inputs {
  _call: CancelBidCall;

  constructor(call: CancelBidCall) {
    this._call = call;
  }

  get _bidAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelBidCall__Outputs {
  _call: CancelBidCall;

  constructor(call: CancelBidCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFeePercentagesCall extends ethereum.Call {
  get inputs(): SetFeePercentagesCall__Inputs {
    return new SetFeePercentagesCall__Inputs(this);
  }

  get outputs(): SetFeePercentagesCall__Outputs {
    return new SetFeePercentagesCall__Outputs(this);
  }
}

export class SetFeePercentagesCall__Inputs {
  _call: SetFeePercentagesCall;

  constructor(call: SetFeePercentagesCall) {
    this._call = call;
  }

  get _marketplacePercentage(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetFeePercentagesCall__Outputs {
  _call: SetFeePercentagesCall;

  constructor(call: SetFeePercentagesCall) {
    this._call = call;
  }
}

export class SetMarketplaceFeeWalletCall extends ethereum.Call {
  get inputs(): SetMarketplaceFeeWalletCall__Inputs {
    return new SetMarketplaceFeeWalletCall__Inputs(this);
  }

  get outputs(): SetMarketplaceFeeWalletCall__Outputs {
    return new SetMarketplaceFeeWalletCall__Outputs(this);
  }
}

export class SetMarketplaceFeeWalletCall__Inputs {
  _call: SetMarketplaceFeeWalletCall;

  constructor(call: SetMarketplaceFeeWalletCall) {
    this._call = call;
  }

  get _marketplaceFeeWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMarketplaceFeeWalletCall__Outputs {
  _call: SetMarketplaceFeeWalletCall;

  constructor(call: SetMarketplaceFeeWalletCall) {
    this._call = call;
  }
}

export class SetMinimumBidIncreasePercentageCall extends ethereum.Call {
  get inputs(): SetMinimumBidIncreasePercentageCall__Inputs {
    return new SetMinimumBidIncreasePercentageCall__Inputs(this);
  }

  get outputs(): SetMinimumBidIncreasePercentageCall__Outputs {
    return new SetMinimumBidIncreasePercentageCall__Outputs(this);
  }
}

export class SetMinimumBidIncreasePercentageCall__Inputs {
  _call: SetMinimumBidIncreasePercentageCall;

  constructor(call: SetMinimumBidIncreasePercentageCall) {
    this._call = call;
  }

  get _percentage(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetMinimumBidIncreasePercentageCall__Outputs {
  _call: SetMinimumBidIncreasePercentageCall;

  constructor(call: SetMinimumBidIncreasePercentageCall) {
    this._call = call;
  }
}

export class SetOnAuctionCall extends ethereum.Call {
  get inputs(): SetOnAuctionCall__Inputs {
    return new SetOnAuctionCall__Inputs(this);
  }

  get outputs(): SetOnAuctionCall__Outputs {
    return new SetOnAuctionCall__Outputs(this);
  }
}

export class SetOnAuctionCall__Inputs {
  _call: SetOnAuctionCall;

  constructor(call: SetOnAuctionCall) {
    this._call = call;
  }

  get _minter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetOnAuctionCall__Outputs {
  _call: SetOnAuctionCall;

  constructor(call: SetOnAuctionCall) {
    this._call = call;
  }
}

export class SetWETHContractAddressCall extends ethereum.Call {
  get inputs(): SetWETHContractAddressCall__Inputs {
    return new SetWETHContractAddressCall__Inputs(this);
  }

  get outputs(): SetWETHContractAddressCall__Outputs {
    return new SetWETHContractAddressCall__Outputs(this);
  }
}

export class SetWETHContractAddressCall__Inputs {
  _call: SetWETHContractAddressCall;

  constructor(call: SetWETHContractAddressCall) {
    this._call = call;
  }

  get _stablecoinContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetWETHContractAddressCall__Outputs {
  _call: SetWETHContractAddressCall;

  constructor(call: SetWETHContractAddressCall) {
    this._call = call;
  }
}

export class SetWordsNFTContractAddressCall extends ethereum.Call {
  get inputs(): SetWordsNFTContractAddressCall__Inputs {
    return new SetWordsNFTContractAddressCall__Inputs(this);
  }

  get outputs(): SetWordsNFTContractAddressCall__Outputs {
    return new SetWordsNFTContractAddressCall__Outputs(this);
  }
}

export class SetWordsNFTContractAddressCall__Inputs {
  _call: SetWordsNFTContractAddressCall;

  constructor(call: SetWordsNFTContractAddressCall) {
    this._call = call;
  }

  get _originContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetWordsNFTContractAddressCall__Outputs {
  _call: SetWordsNFTContractAddressCall;

  constructor(call: SetWordsNFTContractAddressCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
